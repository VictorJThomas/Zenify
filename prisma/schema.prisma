// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String
  active         Boolean         @default(false)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  accounts        Account[]
  posts           Post[]
  moods           Mood[]
  diaries         Diary[]
  sessions        Session[]
  activateToken ActivateToken[]
}

model ActivateToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique
  activateAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.ObjectId
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   String   @map("user_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  content  String?
  title    String
  image    String?
  moods    Mood[]
  @@unique([userId, id])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @db.String
  access_token      String?  @db.String
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?  @db.String
  sessionState      String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

enum Role {
  USER
  PSICOLOGO
}

model Diary {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  image    String?
  content  String
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  moods    Mood[]
  @@unique([userId, id])
}

model Mood {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  postId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  diaryId    String   @db.ObjectId
  diary      Diary    @relation(fields: [diaryId], references: [id])
  mood       String
  moodRecord Int
  content    String
  @@unique([diaryId, id])
  @@unique([userId, id])
  @@unique([postId, id])
} 