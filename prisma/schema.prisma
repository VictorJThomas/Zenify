// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  active         Boolean   @default(false)
  image          String?
  birthDate      DateTime? @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  posts    Post[]
  moods    Mood[]
  diaries  Diary[]
  sessions Session[]
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   String   @map("user_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  content  String?
  title    String
  image    String?

  @@unique([userId, id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  USER
  PSICOLOGO
}

model Diary {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  image    String?
  content  String

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  mood String?

  @@unique([userId, id])
}

model Mood {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  mood     String   @default("Neutral")

  @@index([userId])
}
